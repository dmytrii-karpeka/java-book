{"version":3,"sources":["LabWork.js","labworks/lw1.js","labworks/lw2.js","labworks/lw3.js","labworks/lw4.js","App.js","functionality.js","index.js"],"names":["LabWork","this","props","numer","theme","aim","task","imgsrc","src","alt","className","labcode","commentary","conclusions","React","Component","lw1","lw2","lw3","lw4","App","state","currentPage","nextProps","nextState","event","document","getElementsByClassName","activeButton","slice","length","disactivePreviousButton","classN","target","setState","Array","keys","map","num","onClick","handleClick","id","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5055465a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles/style.css';\r\nimport './styles/fonts.css';\r\n\r\nclass LabWork extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Лабораторна робота №{this.props.numer}</h2>\r\n        <h4><b>Тема</b>: {this.props.theme}</h4>\r\n        <h4><b>Мета</b>: {this.props.aim}</h4>\r\n        <h4><b>Завдання</b>: {this.props.task}</h4>\r\n        {this.props.imgsrc ?\r\n          <img src={this.props.imgsrc} alt=\"Function in laboratory\"/>\r\n        : <p>Додаткових зображень у завданні не було</p>}\r\n        <h4>Виконання:</h4>\r\n        <div className={\"code-div\"}>\r\n          <pre className={\"code-block\"}>{this.props.labcode}</pre>\r\n        </div>\r\n        <h4>Пояснення:</h4>\r\n        <p>{this.props.commentary}</p>\r\n        <h4>Висновки:</h4>\r\n        <p>{this.props.conclusions}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LabWork;","export let lw1 = {\r\n  numer: \"1\",\r\n  theme: \"Основні типи та оператори мови програмування Java\",\r\n  aim: \"Ознайомлення з основними типами та операторами в Java. Здобуття навичок у використанні типів та операторів в Java.\",\r\n  task: \"Створити клас, який складається з виконавчого методу, що виконує обчислення значення функції\",\r\n  imgsrc: \"https://asdjonok.github.io/OOP-SITE/pages/1/formula.png\",\r\n  labcode: `\r\npublic class App {\r\n    public static void main(String[] args) {\r\n        int variant = 9212;\r\n\r\n        /**\r\n         * c2 = 0 -- o1 = +\r\n         * c3 = 2 -- c = 2\r\n         * c5 = 2 -- o2 = %\r\n         * c7 = 0 -- type of i and j = byte\r\n         */\r\n        \r\n         // type of data \"byte\" can be number from -128 to 127 (inclusive)\r\n        byte a = 1;\r\n        byte b = 1;\r\n    \r\n        byte n = 1;\r\n        byte m = 2;\r\n\r\n        int c = 2;\r\n\r\n        float result = 0;\r\n\r\n        if (n < a || m < b || (a <= -2 && n >= -2) || (b <= 0 && m >= 0)) {\r\n            System.out.println(\"There is a problem in input data!\");\r\n        } else {\r\n            for (byte i = a; i <= n; i++) {\r\n                for (byte j = b; j <= m; j++) {\r\n                    result += (float)(i % j) / (i + c);\r\n                }\r\n            }\r\n            System.out.println(result);\r\n        }\r\n    }\r\n}`,\r\ncommentary: `\r\nВ лабораторній роботі було використано bytes як основний тип даних. Задати змінну із цим типом можна числом в районі [-128, 127]. \r\nТакий малий діапазон може стати в пригоді при роботі із роботою у великих масивах, де збереження пам'яті дійсно необхідне.\r\nОкрім цього, змінна з цим типом може бути використана замість int у випадках, де обмеження допомагають краще зрозуміти код.\r\nЯкщо ми знаємо про факт обмеженого невеликого діапазону, то використання в коді цього типу може служити певною формою документування\r\nпро змінну.`,\r\nconclusions: `\r\nТаким чином була проведена робота із застосуванням типу byte, досліджене застосування цього типу.\r\nЗгадано синтаксис циклів у мові Java, приведення типів та його роль у правильності виконання задачі.`\r\n}","export let lw2 = {\r\n  numer: \"2\",\r\n  theme: \"Масиви в мові програмування Java.\",\r\n  aim: \"Ознайомлення з масивами та використання основних методів їх обробки в мові програмування Java. Здобуття навичок у використанні масивів в мові програмування Java.\",\r\n  task: \"Створити клас, який складається з виконавчого методу, що виконує дію з матрицею(ями) (п.2) із зазначеним типом елементів (п.3) та дію із результуючою матрицею С (п.4). Вивести на екран результати першої та другої дій.\",\r\n  imgsrc: \"\",\r\n  labcode:\r\n`\r\nimport java.util.Scanner;\r\nimport java.util.Random;\r\n/** Lab2\r\n *  Karpeka Dmytrii\r\n * \r\n *  variant == 9212\r\n *  C5  = 2 -- C = A + B\r\n *  C7  = 0 -- double\r\n *  C11 = 5 -- Обчислити суму найбільших елементів\r\n *             в рядках матриці з непарними номерами\r\n *             та найменших елементів в рядках матриці з парними номерами\r\n */\r\n\r\npublic class App {\r\n    public static void main(String[] args) throws Exception {\r\n        final Scanner sc = new Scanner(System.in);\r\n\r\n        System.out.println(\"Input number of rows in matrixes:\");\r\n        int rows = sc.nextInt();\r\n        System.out.println(\"Input number of columns in matrixes:\");\r\n        int columns = sc.nextInt();\r\n\r\n        double[][] A = new double[rows][columns];\r\n        double[][] B = new double[rows][columns];\r\n        double[][] C = new double[rows][columns];\r\n\r\n        // gap of random generation of doubles\r\n        int min = 0;\r\n        int max = 100;\r\n\r\n        for (int i = 0; i < rows; i++) {\r\n            for (int j = 0; j < columns; j++) {\r\n                // Random generation of matrixes A and B\r\n                Random rand = new Random();\r\n                A[i][j] = min + (max - min) * rand.nextDouble();\r\n                B[i][j] = min + (max - min) * rand.nextDouble();\r\n\r\n                // Sum of matrixes\r\n                C[i][j] = A[i][j] + B[i][j];\r\n            } \r\n        }\r\n\r\n        double sumMaxes = 0;\r\n        double sumMins = 0;\r\n        double element;\r\n\r\n        for (int i = 0; i < rows; i++) {\r\n            // Alternative alorithm\r\n            // element = C[i][0];\r\n            // for (int j = 1; j < columns; j++) {\r\n            //     if (i % 2 == 0) {\r\n            //         if (C[i][j] < element) {\r\n            //             element = C[i][j];\r\n            //         } \r\n            //     } else {\r\n            //         if (C[i][j] > element) {\r\n            //             element = C[i][j];\r\n            //         }\r\n            //     }\r\n            // }\r\n            // if (i % 2 == 0) {\r\n            //     sumMins += element;\r\n            // } else {\r\n            //     sumMaxes += element;\r\n            // }\r\n\r\n            \r\n            element = C[i][0];\r\n            if (i % 2 == 0) {\r\n                for (int j = 1; j < columns; j++) {\r\n                    if (C[i][j] < element) {\r\n                        element = C[i][j];\r\n                    }\r\n                }\r\n                sumMins += element;\r\n            } else {\r\n                for (int j = 1; j < columns; j++) {\r\n                    if (C[i][j] > element) {\r\n                        element = C[i][j];\r\n                    }\r\n                }\r\n                sumMaxes += element;\r\n            }\r\n        }\r\n \r\n        printMatrix(\"C\", C);\r\n        System.out.println(\"Сума найменших в парних: \" + sumMins);\r\n        System.out.println(\"Сума найбільших в непарних: \" + sumMaxes);\r\n    }\r\n\r\n    public static void printMatrix(String matrixName, double[][] matrix) {\r\n        System.out.println(matrixName + \":\");\r\n        for (int i = 0; i < matrix.length; i++) {\r\n            System.out.print(\"[ \");\r\n            for (int j = 0; j < matrix[i].length; j++) {\r\n                System.out.print(matrix[i][j] + \" \");\r\n            }\r\n            System.out.print(\"]\\\\n\");\r\n        }\r\n    }\r\n}\r\n`,\r\n  commentary: `\r\nВ лабораторній роботі було використано рандомізовану генерацію значень для матриці розмірність якої задає користувач.\r\nСеред таких рандомізованих значень найбільша увага приділялась найменшим елементам в кожному парному рядку та найбільшим елементам в непарних рядках, адже\r\nна них зав'язувалось основне завдання лабораторної.\r\n`,\r\n  conclusions: `\r\nБуло проведено роботу із багатовимірними масивами (матрицями), завдання вимагало алгоритмічности мислення для розв'язку поставленої задачі.  \r\n`\r\n}","export let lw3 = {\r\n  numer: \"3\",\r\n  theme: \"Рядки в мові програмування Java.\",\r\n  aim: \"Ознайомлення з рядками та використання основних методів їх обробки в мові програмування Java. Здобуття навичок у використанні рядків в мові програмування Java.\",\r\n  task: \"Створити клас, який складається з виконавчого методу, що виконує дію текстовим рядком (п.3), тип якого визначено варіантом (п.2).\",\r\n  imgsrc: \"\",\r\n  labcode:\r\n    `\r\npackage lab_3;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class lab3 {\r\n    /**\r\n     * C3 = 2 - String\r\n     * C17 = 15 - replace words specified length with specified word\r\n     *\r\n     */\r\n    public static void main(String[] args) {\r\n        String text = (\"Я на гору круту крем’яную\\\\n\" +\r\n                \"Буду камінь важкий підіймать\\\\n\" +\r\n                \"І, несучи вагу ту страшную,\\\\n\" +\r\n                \"Буду пісню веселу співать.\\\\n\" +\r\n                \"Shakespeare's early plays were written in the conventional style of the day, with elaborate\" +\r\n                \" metaphors and rhetorical phrases that didn't always \" +\r\n                \"align naturally with the story's plot or characters.\\\\n\");\r\n\r\n        Scanner sc = new Scanner(System.in);\r\n        System.out.println(\"Enter word:\");\r\n\r\n        String str = sc.next();\r\n        System.out.println(\"Enter length:\");\r\n        String len = sc.next();\r\n        try\r\n        {\r\n            Integer.parseInt(len.trim());\r\n        }\r\n        catch (NumberFormatException nfe)\r\n        {\r\n            System.out.println(\"Incorrect value:\" + nfe.getMessage());\r\n            System.exit(1);\r\n        }\r\n        String replacedText = text.replaceAll(\"\\\\\\\\b([Є-ЯҐа-їґ’']|[a-zA-Z'])*\" + len + \"\\\\\\\\b\", str);\r\n        System.out.println(replacedText);\r\n    }\r\n}\r\n`,\r\n  commentary: `\r\nУ лабораторній роботі використовується регулярний вираз (Regex). Нескладний патерн за яким шукаються слова можна розшифрувати приблизно так:\r\n  У вказаних межах слова (\\\\b) шукати літери українського або латинського алфавіту у кількості [довжина слова] (len) \r\n`,\r\n  conclusions: `\r\nПовторено те, як працювати із String типом. Згадано методи, що використовуються для роботи із String (trim, parseInt, replaceAll) \r\n`\r\n}","export let lw4 = {\r\n  numer: \"4\",\r\n  theme: \"Класи в мові програмування Java.\",\r\n  aim: \"Ознайомлення з класами. Використання існуючих та створення власних класів в мові Java.\",\r\n  task: \"Створити клас із виконавчим методом, в якому створити масив з об’єктів класу визначеному варіантом (п. 2). Відсортувати масив, за одним з полів, за зростанням, а за іншим, за спаданням використавши при цьому стандартні засоби сортування. Всі змінні повинні бути описані та значення їх задані у виконавчому методі.\",\r\n  imgsrc: \"\",\r\n  labcode:\r\n    `\r\nMain.java    \r\n    \r\npackage lab_4;\r\n\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Comparator;\r\n\r\n\r\npublic class Main {\r\n    /**\r\n     * C11 = 5 - define a class Clothes consisting of at least 5 fields\r\n     *\r\n     */\r\n    public static void main(String[] args) {\r\n        Clothes[] cloth = new Clothes[4];\r\n\r\n        cloth[0] = new Clothes(\"jeans\", \"trousers\", 32, \"jeans\", \"a\");\r\n        cloth[1] = new Clothes(\"jacket\", \"outerwear\", 48, \"cashmere\", \"b\");\r\n        cloth[2] = new Clothes(\"pumped up kicks\", \"shoes\", 39, \"leather\", \"c\");\r\n        cloth[3] = new Clothes(\"jacket\", \"outerwear\", 43, \"wool\", \"d\");\r\n\r\n        System.out.println(\"---Basic output---\\\\n\");\r\n        for (Clothes clothes : cloth) {\r\n            System.out.println(clothes);\r\n        }\r\n\r\n        System.out.println(\"\\\\n---Sorting by name alphabetically---\\\\n\");\r\n        Arrays.sort(cloth, Comparator.comparing(Clothes::getName));\r\n        for (Clothes clothes : cloth) {\r\n            System.out.println(clothes.getName());      //outputting only names, to change - simply delete GetAtr method\r\n        }\r\n\r\n        System.out.println(\"\\\\n---Sorted by size reversed---\\\\n\");\r\n        Arrays.sort(cloth, Comparator.comparing(Clothes::getSize).reversed());\r\n        for (Clothes clothes : cloth) {\r\n            System.out.println(clothes.getSize());      //outputting only sizes, to change - simply delete GetAtr method\r\n        }\r\n    }\r\n}\r\n\r\nClothes.java\r\n\r\npackage lab_4;\r\n\r\npublic class Clothes {\r\n    private String name;        // name of clothing\r\n    private String type;        // type of clothing (for ex. jacket, trousers, t-shirt...)\r\n    private int size;           // for ex.: 1, 2, 3, 4 etc\r\n    private String material;    // silk, cotton, denim, leather etc\r\n    private String brand;       // Gucci, D&G etc\r\n    /**\r\n     *\r\n     * @param name - name of particular piece of clothing\r\n     * @param type - which part of body it belongs\r\n     * @param size - measure for all clothing (imagine, there unique system with certain measurement\r\n     *               for all type of clothing.\r\n     *               Also, there are no limits in size. Program suits for all bodies)\r\n     * @param material - what product consist of (imagine, there only ONE material was necessary for production)\r\n     * @param brand - brand of cloth\r\n     */\r\n    public Clothes(String name, String type, int size, String material/*, String brand*/) {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.size = size;\r\n        this.material = material;\r\n        this.brand = brand;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getSize() {\r\n        return size;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Cloth{\" +\r\n                \"name=\" + name +\r\n                \", type=\" + type +\r\n                \", size=\" + size +\r\n                \", material=\" + material +\r\n                \", brand=\" + brand +\r\n                '}';\r\n    }\r\n}\r\n`,\r\n  commentary: `\r\nНайважливішим у цій роботі є використання анотації @Override, яка дозволяє побачити наочно, що собою являє один із принципів ООП -- наслідування.\r\nПерезаписавши метод toString було змінено знайомий функціонал цього методу на той, що потрібен у класі.\r\n`,\r\n  conclusions: `\r\nПовторено роботу з Java-класами, вивчено можливості документування полів конструктора класу за допомогою анотації @param.\r\nРозширено знання про анотацію @Override. \r\n`\r\n}","import React from 'react';\r\nimport './styles/style.css';\r\nimport './styles/fonts.css';\r\nimport './LabWork';\r\nimport './functionality';\r\nimport LabWork from \"./LabWork\";\r\nimport {lw1} from \"./labworks/lw1\";\r\nimport {lw2} from \"./labworks/lw2\";\r\nimport {lw3} from \"./labworks/lw3\";\r\nimport {lw4} from \"./labworks/lw4\";\r\nimport {disactivePreviousButton} from \"./functionality\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentPage: \"b-0-page\",\r\n      numer: \"0\",\r\n      theme: \"\",\r\n      aim: \"\",\r\n      task: \"\",\r\n      imgsrc: \"\",\r\n      labcode: \"\",\r\n      commentary: \"\",\r\n      conclusions: \"\"\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return !(this.state.currentPage === nextState.currentPage);\r\n  }\r\n\r\n  handleClick(event) {\r\n    disactivePreviousButton();\r\n    const classN = event.target.className.slice(0, \"b-n-page\".length);\r\n    event.target.className += \" isActive\";\r\n    switch (classN) {\r\n      case \"b-0-page\": {\r\n        this.setState(\r\n          {\r\n            currentPage: classN,\r\n            numer: \"0\",\r\n            theme: \"\",\r\n            aim: \"\",\r\n            task: \"\",\r\n            imgsrc: \"\",\r\n            labcode: \"\",\r\n            commentary: \"\",\r\n            conclusions: \"\"}\r\n        )\r\n        break;\r\n      }\r\n      case \"b-1-page\": {\r\n        this.setState({...{currentPage: classN}, ...lw1});\r\n        break;\r\n      }\r\n      case \"b-2-page\": {\r\n        this.setState({...{currentPage: classN}, ...lw2});\r\n        break;\r\n      }\r\n      case \"b-3-page\": {\r\n        this.setState({...{currentPage: classN}, ...lw3});\r\n        break;\r\n      }\r\n      case \"b-4-page\": {\r\n        this.setState({...{currentPage: classN}, ...lw4});\r\n        break;\r\n      }\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"main-container\">\r\n        <div className=\"side-menu\">\r\n          <ul className=\"list\">\r\n            {[...Array(5).keys()].map((num) => {\r\n              return num === 0 ?\r\n                  <li><button className={`b-${num}-page able isActive`} onClick={(event) => this.handleClick(event)}>Головна</button></li>\r\n                : <li><button className={`b-${num}-page able`} onClick={(event) => this.handleClick(event)}>Лабораторна робота №{num}</button></li>\r\n            })}\r\n          </ul>\r\n        </div>\r\n        <div id=\"main-content\">\r\n\r\n          {this.state.currentPage === \"b-0-page\" ?\r\n            <div>\r\n              <h2>Огляд</h2>\r\n              <p>Мета даної сторінки полягає в хостингу фрагментів коду із лабораторних робіт з курсу \"Основи розробки\r\n                на платформі Java\"</p>\r\n              <p>Можливості HTML5, CSS, JS (зокрема і ReactJS) будуть використані для акуратнішого оформлення звітності\r\n                і для зручнішої презентації при захисті лабораторної роботи</p>\r\n              <br/>\r\n              <p>Важливим буде зазначити те, що це моя перша односторінкова веб-сторінка із застосуванням ReactJS, проте\r\n                її практично-навчальний потенціал для мене не змінюється.</p>\r\n              <p>(Критику з приводу організації, дизайнів та вигляду сторінки прийматиму тільки в рамках курсу\r\n                \"Технології програмування користувацьких інтерфейсів (Front-end)\" ))0)</p>\r\n            </div>\r\n            :\r\n            <LabWork numer={this.state.numer}\r\n                     theme={this.state.theme}\r\n                     aim={this.state.aim}\r\n                     task={this.state.task}\r\n                     imgsrc={this.state.imgsrc}\r\n                     labcode={this.state.labcode}\r\n                     commentary={this.state.commentary}\r\n                     conclusions={this.state.conclusions}>\r\n            </LabWork>\r\n          }\r\n        </div>\r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export const disactivePreviousButton = () => {\r\n  if (document.getElementsByClassName('isActive')[0]) {\r\n    const activeButton = document.getElementsByClassName('isActive')[0];\r\n    activeButton.className = activeButton.className.slice(0, -' isActive'.length);\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/style.css';\r\nimport './styles/fonts.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}